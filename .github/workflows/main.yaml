name: CI devops 2025

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

jobs:
  # -------------------- CI : build + tests + sonar --------------------
  test-backend:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      # Build + tests (avec retry Maven Central)
      - name: Build and test with Maven (retry)
        working-directory: myapp
        run: |
          set -e
          for i in 1 2 3; do
            mvn -B -ntp clean verify \
              -Dmaven.wagon.http.retryHandler.count=3 \
              -Dmaven.wagon.http.connectionManager.ttl=60 \
              -Dmaven.wagon.http.pool=false && break || {
                echo "Maven attempt $i failed; retrying in 10s..."; sleep 10;
              }
          done

      - name: Check Sonar token presence
        run: |
          test -n "${{ secrets.pwdsonar }}" || (echo " Missing Sonar token (secrets.pwdsonar)" && exit 1)
          echo " SONAR token detected."

      - name: SonarCloud analysis (debug)
        working-directory: myapp
        env:
          SONAR_TOKEN: ${{ secrets.pwdsonar }}
        run: |
          set -euo pipefail
          SONAR_ORG="brendakoundjo"
          SONAR_PROJECT="BrendaKoundjo_Devops"
          java -version || true
          mvn -version || true
          mvn -B -e -X sonar:sonar \
            -Dsonar.organization="$SONAR_ORG" \
            -Dsonar.projectKey="$SONAR_PROJECT" \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login="$SONAR_TOKEN" \
            -Dsonar.branch.name="${{ github.ref_name }}" \
            -Dsonar.sources=src/main \
            -Dsonar.tests=src/test

  # -------------------- Build & Push docker images --------------------
  build-and-push-docker-image:
    needs: test-backend
    runs-on: ubuntu-24.04
    # éviter un push depuis PR de fork (secrets non transmis)
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == false }}

    outputs:
      backend_digest: ${{ steps.build_backend.outputs.digest }}
      httpd_digest:   ${{ steps.build_httpd.outputs.digest }}
      db_digest:      ${{ steps.build_db.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check DockerHub secrets presence
        run: |
          test -n "${{ secrets.username }}"    || (echo " Missing Docker username (secrets.username)" && exit 1)
          test -n "${{ secrets.coursdevops }}" || (echo " Missing Docker token (secrets.coursdevops)" && exit 1)
          echo " Docker secrets detected."

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.username }}
          password: ${{ secrets.coursdevops }}

      # Backend image (Dockerfile dans myapp/)
      - name: Build and push backend image
        id: build_backend
        uses: docker/build-push-action@v6
        with:
          context: ./myapp
          dockerfile: ./myapp/Dockerfile
          push: true
          tags: ${{ secrets.username }}/tp-devops-simple-api-backend:latest
          provenance: false

      # Database image (facultatif)
      - name: Build and push database image
        id: build_db
        if: ${{ hashFiles('db/Dockerfile') != '' }}
        uses: docker/build-push-action@v6
        with:
          context: ./db
          dockerfile: ./db/Dockerfile
          push: true
          tags: ${{ secrets.username }}/tp-devops-simple-api-database:latest
          provenance: false

      # HTTPD image (facultatif)
      - name: Build and push httpd image
        id: build_httpd
        if: ${{ hashFiles('httpd/Dockerfile') != '' }}
        uses: docker/build-push-action@v6
        with:
          context: ./httpd
          dockerfile: ./httpd/Dockerfile
          push: true
          tags: ${{ secrets.username }}/tp-devops-simple-api-httpd:latest
          provenance: false

  deploy:
    needs: build-and-push-docker-image
    runs-on: ubuntu-24.04
    # Déploie seulement depuis main
    if: ${{ github.ref == 'refs/heads/main' }}
    # (Optionnel) Approval via Environment
    environment:
      name: production
      url: http://brendaaudrey.koundjonguepkap.takima.cloud

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Ansible & SSH client
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible openssh-client

      - name: Write SSH key
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_deploy
          printf "%s" "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_deploy
          {
            echo "Host *"
            echo "  StrictHostKeyChecking no"
          } > ~/.ssh/config

      - name: Deploy with Ansible (pin images by digest)
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          # Compose les références par digest si dispo, sinon fallback :latest
          APP_IMG="${{ secrets.username }}/tp-devops-simple-api-backend@${{ needs.build-and-push-docker-image.outputs.backend_digest }}"
          HTTPD_IMG="${{ secrets.username }}/tp-devops-simple-api-httpd@${{ needs.build-and-push-docker-image.outputs.httpd_digest }}"
          DB_IMG="${{ secrets.username }}/tp-devops-simple-api-database@${{ needs.build-and-push-docker-image.outputs.db_digest }}"

          if [ -z "${{ needs.build-and-push-docker-image.outputs.backend_digest }}" ]; then
            APP_IMG="${{ secrets.username }}/tp-devops-simple-api-backend:latest"
          fi
          if [ -z "${{ needs.build-and-push-docker-image.outputs.httpd_digest }}" ]; then
            HTTPD_IMG="${{ secrets.username }}/tp-devops-simple-api-httpd:latest"
          fi
          if [ -z "${{ needs.build-and-push-docker-image.outputs.db_digest }}" ]; then
            DB_IMG="${{ secrets.username }}/tp-devops-simple-api-database:latest"
          fi

          echo "Deploying with:"
          echo "  backend: ${APP_IMG}"
          echo "  httpd:   ${HTTPD_IMG}"
          echo "  db:      ${DB_IMG}"

          ansible-playbook -i ansible/inventories/setup.yml ansible/site.yml \
            --user admin \
            --private-key ~/.ssh/id_deploy \
            --extra-vars "app_image=${APP_IMG} proxy_image=${HTTPD_IMG} db_image=${DB_IMG}"
